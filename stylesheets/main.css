/*This is
a comment*/
body
{
    background-color: #333344;

    /*
     Some browsers (Firefox on Ubuntu) have solid-grey scrollbars with transparent
     backgrounds. Give the background a gradient to make this scrollbar visible.
     */
    background-image: linear-gradient(179deg, rgba(0, 0, 0, 1.0) 500px, rgba(100, 100, 100, 1.0) 510px);
    background-size: 100vw 100vh;
}

/*
  A parallax group allows the background of the group
  to scroll at a different rate from the foreground.
  Perspective Ref: https://developer.mozilla.org/en-US/docs/web/css/perspective
  Parallax Ref: https://keithclark.co.uk/articles/pure-css-parallax-websites/
*/
.parallax
{
    position: absolute;
    top: 0;
    left: 0;

    perspective: 1px; /*
                        Causes parallax. Note: Changing this value requires a change
                        in the scale of background entities.
                       */

    /* Scroll the parallax region. */
    width: 100vw;
    height: 100vh;
    overflow-x: hidden;
    overflow-y: auto;

    /*
        There might be additional space at the end of the page.
        Give the page a background image that can fill that space!
    */
    /* background-image varies from page to page, so is set in the HTML. */
    background-attachment: fixed;
    background-position: center;
    background-size: cover;
    background-repeat: no-repeat;
}

.parallax > .parallaxMotionGroup
{
    transform-style: preserve-3d;
    height: 200vh;
}

.parallaxMotionGroup > .content
{
    position: absolute;
    top: 25%;
    left: 50%;

    transform: translate(-50%, -50%);
}

.parallaxMotionGroup > .content,
.parallaxFixedGroup > .content
{
    max-width: 500px;
    text-align: center;
    color: wheat;
    text-shadow: 0 0 4px rgba(0, 0, 0, 0.9);

    margin-left: auto;
    margin-right: auto;

    font-size: 200%;
}

.parallaxMotionGroup > .background
{
    position: absolute;
    top: 0;
    height: 100vh;
    overflow-y: hidden;

    transform: translateZ(-1px) scale(2); /*
                                            Scale the background image to
                                            adjust its size for perspective.
                                           */
}

.parallaxMotionGroup > .background > .img
{
    width: 100vw;
    height: 100vh;

    background-position: center;
    background-repeat: no;
    background-size: cover;
}

/*
    An alternative approach to parallax: a fixed background.
    See https://www.w3schools.com/howto/howto_css_parallax.asp.
 */
.parallaxFixedGroup
{
    background-attachment: fixed;
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;

    padding-left: 10vw;
    padding-right: 10vw;

    text-align: center;

    height: 100vh;
}

.parallax > .parallaxFixedGroup
{
    margin-top: -100vh;
    height: 150vh;
    padding-top: 150vh;
}

/* Make the shift between the first parallax pane
   and the background less noticable. */
.parallax > :nth-child(2)
{
    box-shadow: 0px -200px 1px black;   
}

/* Another method for displaying content. */
.paneContent
{
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;

    overflow-x: hidden;
    overflow-y: auto;

    padding-bottom: 0;

    display: flex;
    flex-direction: column;
    align-content: space-between;
}

.paneContent > main
{
    /* Center and background. */
    max-width: 1234px;

    margin-left: auto; /* Center it! */
    margin-right: auto;/*            */

    background-color: white;
    color: black;
    font: 14pt Sans;

    padding: 10px 30px 10px 3px; /* Push left-column content to the edge. */

    /* Shape decoration. */
    border-radius: 4px;
    box-shadow: 2px 2px 2px rgba(100, 100, 100, 0.8);
}

.paneContent > main > div
{
    display: flex;
    flex-direction: row;
    max-width: 100vw; /* Needed to prevent overflow. */
}

.paneContent > main img
{
    width: 100%;
}

.paneContent > main a
{
    color: #7700f7;
    text-decoration: none;
    font-weight: bold;
}

.paneContent > main .left
{
    flex-shrink: 4;
    flex-grow: 1;
    width: 600px; /* We're using flex, so not really a fixed size. See: https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox */
}

.paneContent > main .right
{
    flex-grow: 4;
    flex-shrink: 1;

    width: 1000px; /* For relative scale. */

    padding-left: 20px;
    padding-right: 20px;
}

.paneContent footer
{
    margin-top: 50px;
    margin-bottom: 0;
}

header
{
    display: flex;
    flex-direction: row;
    justify-content: space-evenly;
    text-align: center;

    z-index: 4;

    position: sticky;
    top: 0;
    left: 0;
    right: 0;
    
    flex-shrink: 0;

    padding: 10px 0;
    background-color: rgba(0, 0, 0, 0.8);
}

header > a
{
    color: white;
    text-decoration: none;
    font: italic 16pt Sans;
}

footer
{
    background-color: #334433;
    color: white;
    font-family: sans;

    display: flex;
    flex-direction: row;
    flex-shrink: 0; /* Prevent Safari from shrinking the background & not the text. */

    box-shadow: 0 0 30px #334433;

    margin-left: auto;
    margin-right: auto;

    font-size: 24pt;

    width: 100vw;
}

footer > .img
{
    flex-shrink: 1;
    flex-grow: 1;
    min-width: 0;
    max-width: 600px;

    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
}

footer > .content
{
    flex-grow: 1;

    width: 400px;
    padding: 10px;

    /* Centering! */
    max-width: 1234px;
    margin-left: auto;
    margin-right: auto;
}

footer a
{
    color: orange;
}

@media screen and (max-width: 1234px)
{
    footer
    {
        font-size: 12pt;
    }
}

@media screen and (max-width: 700px)
{
    footer > .img
    {
        display: none;
    }
}

@keyframes dropdownGrowInY
{
    0% { transform: scale(1, 0); max-height: 0px; }
    100% { transform: scale(1, 1); max-height: 500px; }
}

/* Smaller, styled widgets. */
.dropdown > .content
{
    max-height: 0px; /* If not expanded, hide the content. */
    overflow: auto; /* The content will have a finite max-height. Scroll if it reaches this. */


    /* Transformation gives a smoother animation, but we need height-based animation, too. */
    transform-origin: top center;
    transform: scale(1, 0);

    padding: 0 0 0 0; /* Changing the padding provides a neat animation! */
    margin: 0 0 0 0;

    transition: transform ease 0.5s, max-height ease 0.5s, padding ease 0.5s, margin ease 0.5s;

    /* Give the content a border, to better associate it with the dropdown. */
    border-left: 1px solid gray;

    /* General content styling */
    font-size: 12pt;
}

.dropdown.expanded > .content
{
    max-height: 500px;
    padding: 10px 20px 10px 20px;
    margin: 0 0 10px 0;
    transform: scale(1, 1);

    animation: dropdownGrowInY 0.5s ease;
}

.dropdown > .title
{
    display: flex;
    flex-direction: row;
    cursor: pointer;
}

/* The arrow */
.dropdown > .title > .arrow
{
    height: 10px;

    /* Center vertically. */
    margin-top: auto;
    margin-bottom: auto;

    /* Don't expand. */
    flex-grow: 0;

    /* Spacing */
    margin-right: 15px;

    /* Rotation and animation. */
    transform: rotate(0deg);
    transition: 0.5s ease all;
}

.dropdown.expanded > .title > .arrow
{
    transform: rotate(90deg);
}

/* The title content */
.dropdown > .title > .content
{
    /* Render a changing-size underline to provide visual feedback for selection/hovering. */
    background-image: linear-gradient(rgba(255, 255, 255, 0.8) 95%, rgba(0, 0, 0, 0.8) 5%);

    background-repeat: no-repeat;
    background-size: 0% 100%;
    background-position-x: left;

    font-size: 110%; /* Slight font-size increas */

    transition: 0.5s ease all;
}

.dropdown > .title:hover > .content,
.dropdown > .title:focus > .content
{
    background-size: 100% 100%;
}

/* Global, element-based styling. */
a
{
    transition: 0.4s ease all;

    display: inline-block;
    transform: matrix(1, 0, 0, 1, 0, 0);
}

a:hover
{
    transform: matrix(1.1, 0.01, 0, 1, 0, 0);
}

.spacer
{
    flex-grow: 1;
}
